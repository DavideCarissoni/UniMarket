/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.generated.DefaultSchema;
import jooq.generated.Keys;
import jooq.generated.tables.records.ProfiliUtenteRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProfiliUtente extends TableImpl<ProfiliUtenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>profili_utente</code>
     */
    public static final ProfiliUtente PROFILI_UTENTE = new ProfiliUtente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfiliUtenteRecord> getRecordType() {
        return ProfiliUtenteRecord.class;
    }

    /**
     * The column <code>profili_utente.id</code>.
     */
    public final TableField<ProfiliUtenteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>profili_utente.nome</code>.
     */
    public final TableField<ProfiliUtenteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>profili_utente.cognome</code>.
     */
    public final TableField<ProfiliUtenteRecord, String> COGNOME = createField(DSL.name("cognome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>profili_utente.email</code>.
     */
    public final TableField<ProfiliUtenteRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>profili_utente.numero_telefono</code>.
     */
    public final TableField<ProfiliUtenteRecord, String> NUMERO_TELEFONO = createField(DSL.name("numero_telefono"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>profili_utente.timestamp</code>.
     */
    public final TableField<ProfiliUtenteRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ProfiliUtente(Name alias, Table<ProfiliUtenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfiliUtente(Name alias, Table<ProfiliUtenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>profili_utente</code> table reference
     */
    public ProfiliUtente(String alias) {
        this(DSL.name(alias), PROFILI_UTENTE);
    }

    /**
     * Create an aliased <code>profili_utente</code> table reference
     */
    public ProfiliUtente(Name alias) {
        this(alias, PROFILI_UTENTE);
    }

    /**
     * Create a <code>profili_utente</code> table reference
     */
    public ProfiliUtente() {
        this(DSL.name("profili_utente"), null);
    }

    public <O extends Record> ProfiliUtente(Table<O> child, ForeignKey<O, ProfiliUtenteRecord> key) {
        super(child, key, PROFILI_UTENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ProfiliUtenteRecord, Integer> getIdentity() {
        return (Identity<ProfiliUtenteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProfiliUtenteRecord> getPrimaryKey() {
        return Keys.PROFILI_UTENTE__PK_PROFILI_UTENTE;
    }

    @Override
    public List<UniqueKey<ProfiliUtenteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PROFILI_UTENTE__UK_PROFILI_UTENTE_9297935);
    }

    @Override
    public ProfiliUtente as(String alias) {
        return new ProfiliUtente(DSL.name(alias), this);
    }

    @Override
    public ProfiliUtente as(Name alias) {
        return new ProfiliUtente(alias, this);
    }

    @Override
    public ProfiliUtente as(Table<?> alias) {
        return new ProfiliUtente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfiliUtente rename(String name) {
        return new ProfiliUtente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfiliUtente rename(Name name) {
        return new ProfiliUtente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfiliUtente rename(Table<?> name) {
        return new ProfiliUtente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
