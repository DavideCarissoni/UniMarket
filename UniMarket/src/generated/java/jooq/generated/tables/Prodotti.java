/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooq.generated.DefaultSchema;
import jooq.generated.Keys;
import jooq.generated.tables.records.ProdottiRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Prodotti extends TableImpl<ProdottiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>prodotti</code>
     */
    public static final Prodotti PRODOTTI = new Prodotti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProdottiRecord> getRecordType() {
        return ProdottiRecord.class;
    }

    /**
     * The column <code>prodotti.codice</code>.
     */
    public final TableField<ProdottiRecord, Integer> CODICE = createField(DSL.name("codice"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>prodotti.nome</code>.
     */
    public final TableField<ProdottiRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>prodotti.descrizione</code>.
     */
    public final TableField<ProdottiRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>prodotti.prezzo</code>.
     */
    public final TableField<ProdottiRecord, String> PREZZO = createField(DSL.name("prezzo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>prodotti.timestamp</code>.
     */
    public final TableField<ProdottiRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Prodotti(Name alias, Table<ProdottiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prodotti(Name alias, Table<ProdottiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>prodotti</code> table reference
     */
    public Prodotti(String alias) {
        this(DSL.name(alias), PRODOTTI);
    }

    /**
     * Create an aliased <code>prodotti</code> table reference
     */
    public Prodotti(Name alias) {
        this(alias, PRODOTTI);
    }

    /**
     * Create a <code>prodotti</code> table reference
     */
    public Prodotti() {
        this(DSL.name("prodotti"), null);
    }

    public <O extends Record> Prodotti(Table<O> child, ForeignKey<O, ProdottiRecord> key) {
        super(child, key, PRODOTTI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ProdottiRecord, Integer> getIdentity() {
        return (Identity<ProdottiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProdottiRecord> getPrimaryKey() {
        return Keys.PRODOTTI__PK_PRODOTTI;
    }

    @Override
    public Prodotti as(String alias) {
        return new Prodotti(DSL.name(alias), this);
    }

    @Override
    public Prodotti as(Name alias) {
        return new Prodotti(alias, this);
    }

    @Override
    public Prodotti as(Table<?> alias) {
        return new Prodotti(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodotti rename(String name) {
        return new Prodotti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodotti rename(Name name) {
        return new Prodotti(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodotti rename(Table<?> name) {
        return new Prodotti(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
