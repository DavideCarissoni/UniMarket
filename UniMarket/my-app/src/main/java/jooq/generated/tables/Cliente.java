/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Collection;

import jooq.generated.DefaultSchema;
import jooq.generated.tables.records.ClienteRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cliente extends TableImpl<ClienteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cliente</code>
     */
    public static final Cliente CLIENTE = new Cliente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClienteRecord> getRecordType() {
        return ClienteRecord.class;
    }

    /**
     * The column <code>cliente.id</code>.
     */
    public final TableField<ClienteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cliente.indirizzo</code>.
     */
    public final TableField<ClienteRecord, String> INDIRIZZO = createField(DSL.name("indirizzo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cliente.numero_carta</code>.
     */
    public final TableField<ClienteRecord, String> NUMERO_CARTA = createField(DSL.name("numero_carta"), SQLDataType.CLOB, this, "");

    private Cliente(Name alias, Table<ClienteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cliente(Name alias, Table<ClienteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cliente</code> table reference
     */
    public Cliente(String alias) {
        this(DSL.name(alias), CLIENTE);
    }

    /**
     * Create an aliased <code>cliente</code> table reference
     */
    public Cliente(Name alias) {
        this(alias, CLIENTE);
    }

    /**
     * Create a <code>cliente</code> table reference
     */
    public Cliente() {
        this(DSL.name("cliente"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Cliente as(String alias) {
        return new Cliente(DSL.name(alias), this);
    }

    @Override
    public Cliente as(Name alias) {
        return new Cliente(alias, this);
    }

    @Override
    public Cliente as(Table<?> alias) {
        return new Cliente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(String name) {
        return new Cliente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Name name) {
        return new Cliente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Table<?> name) {
        return new Cliente(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Condition condition) {
        return new Cliente(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
