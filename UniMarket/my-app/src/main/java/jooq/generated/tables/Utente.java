/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Collection;

import jooq.generated.DefaultSchema;
import jooq.generated.tables.records.UtenteRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Utente extends TableImpl<UtenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utente</code>
     */
    public static final Utente UTENTE = new Utente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UtenteRecord> getRecordType() {
        return UtenteRecord.class;
    }

    /**
     * The column <code>utente.id</code>.
     */
    public final TableField<UtenteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utente.nome</code>.
     */
    public final TableField<UtenteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>utente.cognome</code>.
     */
    public final TableField<UtenteRecord, String> COGNOME = createField(DSL.name("cognome"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>utente.numero_telefono</code>.
     */
    public final TableField<UtenteRecord, String> NUMERO_TELEFONO = createField(DSL.name("numero_telefono"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>utente.email</code>.
     */
    public final TableField<UtenteRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>utente.password</code>.
     */
    public final TableField<UtenteRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    private Utente(Name alias, Table<UtenteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Utente(Name alias, Table<UtenteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>utente</code> table reference
     */
    public Utente(String alias) {
        this(DSL.name(alias), UTENTE);
    }

    /**
     * Create an aliased <code>utente</code> table reference
     */
    public Utente(Name alias) {
        this(alias, UTENTE);
    }

    /**
     * Create a <code>utente</code> table reference
     */
    public Utente() {
        this(DSL.name("utente"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UtenteRecord, Integer> getIdentity() {
        return (Identity<UtenteRecord, Integer>) super.getIdentity();
    }

    @Override
    public Utente as(String alias) {
        return new Utente(DSL.name(alias), this);
    }

    @Override
    public Utente as(Name alias) {
        return new Utente(alias, this);
    }

    @Override
    public Utente as(Table<?> alias) {
        return new Utente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(String name) {
        return new Utente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(Name name) {
        return new Utente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(Table<?> name) {
        return new Utente(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Condition condition) {
        return new Utente(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utente where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utente whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
