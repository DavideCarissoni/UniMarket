/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDate;
import java.util.Collection;

import jooq.generated.DefaultSchema;
import jooq.generated.tables.records.HteSamplePersonRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HteSamplePerson extends TableImpl<HteSamplePersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>HTE_sample_person</code>
     */
    public static final HteSamplePerson HTE_SAMPLE_PERSON = new HteSamplePerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HteSamplePersonRecord> getRecordType() {
        return HteSamplePersonRecord.class;
    }

    /**
     * The column <code>HTE_sample_person.date_of_birth</code>.
     */
    public final TableField<HteSamplePersonRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>HTE_sample_person.important</code>.
     */
    public final TableField<HteSamplePersonRecord, Boolean> IMPORTANT = createField(DSL.name("important"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>HTE_sample_person.rn_</code>.
     */
    public final TableField<HteSamplePersonRecord, Integer> RN_ = createField(DSL.name("rn_"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>HTE_sample_person.version</code>.
     */
    public final TableField<HteSamplePersonRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>HTE_sample_person.id</code>.
     */
    public final TableField<HteSamplePersonRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>HTE_sample_person.hib_sess_id</code>.
     */
    public final TableField<HteSamplePersonRecord, String> HIB_SESS_ID = createField(DSL.name("hib_sess_id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>HTE_sample_person.email</code>.
     */
    public final TableField<HteSamplePersonRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>HTE_sample_person.first_name</code>.
     */
    public final TableField<HteSamplePersonRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>HTE_sample_person.last_name</code>.
     */
    public final TableField<HteSamplePersonRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>HTE_sample_person.occupation</code>.
     */
    public final TableField<HteSamplePersonRecord, String> OCCUPATION = createField(DSL.name("occupation"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>HTE_sample_person.phone</code>.
     */
    public final TableField<HteSamplePersonRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>HTE_sample_person.role</code>.
     */
    public final TableField<HteSamplePersonRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255), this, "");

    private HteSamplePerson(Name alias, Table<HteSamplePersonRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HteSamplePerson(Name alias, Table<HteSamplePersonRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>HTE_sample_person</code> table reference
     */
    public HteSamplePerson(String alias) {
        this(DSL.name(alias), HTE_SAMPLE_PERSON);
    }

    /**
     * Create an aliased <code>HTE_sample_person</code> table reference
     */
    public HteSamplePerson(Name alias) {
        this(alias, HTE_SAMPLE_PERSON);
    }

    /**
     * Create a <code>HTE_sample_person</code> table reference
     */
    public HteSamplePerson() {
        this(DSL.name("HTE_sample_person"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public HteSamplePerson as(String alias) {
        return new HteSamplePerson(DSL.name(alias), this);
    }

    @Override
    public HteSamplePerson as(Name alias) {
        return new HteSamplePerson(alias, this);
    }

    @Override
    public HteSamplePerson as(Table<?> alias) {
        return new HteSamplePerson(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HteSamplePerson rename(String name) {
        return new HteSamplePerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HteSamplePerson rename(Name name) {
        return new HteSamplePerson(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HteSamplePerson rename(Table<?> name) {
        return new HteSamplePerson(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HteSamplePerson where(Condition condition) {
        return new HteSamplePerson(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HteSamplePerson where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HteSamplePerson where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HteSamplePerson where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HteSamplePerson where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HteSamplePerson where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HteSamplePerson where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HteSamplePerson where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HteSamplePerson whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HteSamplePerson whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
